#!/bin/sh

VERSION=0.10.4-$(md5sum $0 | cut -b-5)

test "$1" = "-V" && {
  echo $VERSION
  exit
}

test `id -u` -eq 0 || { echo "You have to be root!"; exit 1; }
a="/$0"; a=${a%/*}; a=${a:-.}; a=${a#/}/; BINDIR=$(cd $a; pwd)
PATH=/usr/sbin:$PATH:$BINDIR

basename=${0##*/}

test -d "$1" || {
  echo Directory $1 does not exist.
  exit 1
}

CHROOT=${1:-'/var/tmp/rhel5-x86_64'}
shift
chmod a+rx $CHROOT
CHROOT=`cd $CHROOT; pwd`
LOCKDIR=$CHROOT/.lock
test -d $LOCKDIR || mkdir $LOCKDIR

busybox fuser >/dev/null 2>&1
test $? -eq 0 && {
  FUSER="busybox fuser $CHROOT"
} || {
  type fuser 2>/dev/null && FUSER="fuser $CHROOT"
}

SHELL=/bin/sh
test "$1" = "-k" && { kill=y; shift; }
test "$1" = "-s" && { SHELL=$2; shift 2; }
test "$*" != "" && { CMDS="-c '$*'"; }

MTAB=$CHROOT/etc/mtab
rm $MTAB
# This is needed mainly for Arch Linux's pacman
grep -w / /proc/mounts > $MTAB
unset MTAB

mountprint(){
  printf "\t" \
    && echo "Mounting $1 to $2..."
}

mounty() {
  WHAT=$1
  DEST=${CHROOT}$2
  ! test -d $DEST || grep $DEST /proc/mounts && return 1
  shift 2
  test -z "$banner" &&
    echo $basename: Mounting filesystems... &&
    banner=1
  mountprint $WHAT $DEST && mount $* $WHAT $DEST;
}

umounty() {
  L=$LOCKDIR/mount
  mkdir $LOCKDIR
  I=0; while ! mkdir $L; do sleep 1; I=$((I+1)); test $I -lt 9 || exit 1; done
  mount | grep -w "$CHROOT" | while read a b c d
    do echo $c
  done | grep -v "^$CHROOT\$" | sort -r | while read a
  do
    echo -n "$basename: Umounting $a... "
    umount $a && echo ok || { echo FAILED; return 1; }
  done
  echo $basename: Filesystems successfully umounted
  rmdir $LOCKDIR/mount
  rmdir $LOCKDIR
}

{
L=$LOCKDIR/mount
I=0; while ! mkdir $L; do sleep 1; I=$((I+1)); test $I -lt 9 || exit 1; done

mounty sysfs /sys -n -t sysfs
mounty proc /proc -n -t proc
mounty devpts /dev/pts -n -t devpts -o newinstance
mounty shm /dev/shm -t tmpfs
mounty tmpfs /tmp -t tmpfs
test -n "$banner" && echo $basename: Filesystems mounting done
echo $basename: Changing to $CHROOT
rmdir $LOCKDIR/mount
} 1>&2

LOCK=$LOCKDIR/$$
mkdir $LOCK || exit 1
echo $basename: My LOCK is $LOCK

addfile () {
  test "$1" = "-o" && { shift; rm $CHROOT/$1; return 0; }
  test -r $1 || return 1
  test -r $CHROOT/$1 || cp $1 $CHROOT/$1
}

basicdev() {
  mknod $CHROOT/dev/tty c 5 0
  mknod $CHROOT/dev/console c 5 1
  mknod $CHROOT/dev/ptmx c 5 2
  mknod $CHROOT/dev/null c 1 3
  mknod $CHROOT/dev/zero c 1 5
  mknod $CHROOT/dev/full c 1 7
  mknod $CHROOT/dev/random c 1 8
  mknod $CHROOT/dev/urandom c 1 9
  ln -nsf /proc/self/fd $CHROOT/dev/fd
  ln -nsf /proc/self/fd/2 $CHROOT/dev/stderr
  ln -nsf /proc/self/fd/0 $CHROOT/dev/stdin
  ln -nsf /proc/self/fd/1 $CHROOT/dev/stdout
}

# Files that are system-dependent
# /etc/resolv.conf
# /etc/hosts, /etc/fstab, /etc/passwd,
# /etc/group, /etc/shadow, /etc/ld.so.conf, /etc/scsi_id.config

test -r $CHROOT/dev/basicdev || basicdev && touch $CHROOT/dev/basicdev
test -d $CHROOT/etc/sysconfig && touch $CHROOT/etc/sysconfig/network
addfile /etc/hosts
addfile /etc/resolv.conf
addfile /etc/krb5.conf

addline () {
  test "$1" = "-f" && { force=1; shift; }
  file="$1"
  pat="$2"
  shift
  shift
  while ! test -w "$file"; do touch "$file"; done
  if [ -n "$force" ]
    then sed -i "\^$pat^d" "$file"
    else grep -q "$pat" "$file" && return 1
  fi
  echo "$@" >> $file
}
PS1='chsys:${CHROOT##*/}\$ '

echo "$CHROOT" | grep -q "i386" && SETARCH="setarch i386"

$SETARCH chroot "$CHROOT" /usr/bin/env -i \
  SHELL=$SHELL HOME=/root TERM="$TERM" PS1="$PS1" \
  PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
  DISPLAY=$DISPLAY \
  $SHELL -c "{ cat /proc/mounts >> /etc/mtab; cd; exec $SHELL ${CMDS:-"-il"}; }" \
  || true

rmdir $LOCK

orphans() {
  test -n "$FUSER" || return 0
  PROCS=$($FUSER)
  RET=$?
  test -n "$PROCS" && {
    echo "$basename: Filesystems not umounted (check PIDs)"
    echo
    echo Following processes are still running under $CHROOT:
    for i in $PROCS
    do
      echo $i $(cat /proc/$i/cmdline | tr '\0' ' ')
    done
    test -n "$kill" || {
      printf "Do you want to kill them? (y/N) "
      read kill
    }
    echo $kill | grep -iq ^y && \
      { echo "Killing $PROCS..."; kill -HUP $PROCS && RET=0;}
}
  return $RET
}

{
echo
if rmdir $LOCKDIR 2>/dev/null; then umounty; else orphans; fi
} 1>&2
