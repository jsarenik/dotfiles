#!/bin/sh

VER=0.14.4
VERSION=$VER-$(sed 1d $0 | md5sum | cut -b-5)

a="/$0"; a=${a%/*}; a=${a:-.}; a=${a#/}/; BINDIR=$(cd "$a"; pwd)

basename=${0##*/}

update() {
  CHNEW=$BINDIR/chsys-new-$$
  exec sh -c "wget -q -O $CHNEW https://raw.githubusercontent.com/jsarenik/dotfiles/master/bin/chsys; VER=$(echo $VER | tr -d .); VERNEW=\$(grep ^VER= $CHNEW | cut -d= -f2 | tr -d . || echo 0000); test \$VERNEW -gt \$VER && { echo \"#!$(which sh)\" > $BINDIR/$basename; cat $CHNEW | sed 1d >> $BINDIR/$basename; chmod a+x $BINDIR/$basename; } || { echo No update found.; exit 1; } ; rm $CHNEW"
}

test "$1" = "--update" && update
trap "" INT QUIT EXIT

test -d "$1" && {
  CHROOT=$1
  shift
}

usage() {
  cat <<-EOF
	Usage: $0 <dir> [OPTION]... [COMMAND]...
	Usage: $0 [OPTION]... <dir> [COMMAND]...
	Mount pseudo filesystems and enter chroot environment.
	Optionally run a command and exit.

	Available options:
	  -V                        print version
	  -u                        update the script itself
	  -k                        kill leftover processes on exit
	  -s SHELL                  enter chroot using SHELL
	  -d                        use static /dev
	EOF
  exit 1
}

SHELL=/bin/sh
unset kill
unset staticdev

while getopts "Vuks:dh-" opt; do
case $opt in
  V) echo $VERSION; exit;;
  u) update;;
  k) kill=y;;
  s) test -n "$OPTARG"; SHELL="$OPTARG";;
  d) staticdev=y;;
  *) usage;;
esac
done
shift $((OPTIND-1))

test $(id -u) -eq 0 || { echo "You have to be root!"; exit 1; }
PATH=/usr/sbin:$PATH:$BINDIR

test -d "$1" && {
  CHROOT=${1:-'/var/tmp/rhel5-x86_64'}
  shift
}

test -d "$CHROOT" || {
  echo Directory $1 does not exist.
  exit 1
}

chmod a+rx $CHROOT
CHROOT=$(cd $CHROOT; pwd)
LOCKDIR=$CHROOT/.lock
test -d $LOCKDIR || mkdir $LOCKDIR

busybox fuser >/dev/null 2>&1
test $? -eq 0 && {
  FUSER="busybox fuser $CHROOT"
} || {
  type fuser >/dev/null 2>&1 && FUSER="fuser $CHROOT"
}


test "$*" != "" && { CMDS="-c '$*'"; }

MTAB=$CHROOT/etc/mtab
rm $MTAB
grep "$CHROOT " /proc/mounts && > $MTAB || {
# This is needed mainly for Arch Linux's pacman
grep -w / /proc/mounts > $MTAB
unset MTAB
}

mountprint(){
  printf "\t" \
    && echo "Mounting $1 to $2..."
}

mounty() {
  WHAT=$1
  DEST=${CHROOT}$2
  ! test -d $DEST || grep $DEST /proc/mounts && return 1
  shift 2
  mountprint $WHAT $DEST && mount $* $WHAT $DEST;
}

umounty() {
  L=$LOCKDIR/mount
  UFAIL=$LOCKDIR/umountfail
  I=0; while ! mkdir $L; do sleep 1; I=$((I+1)); test $I -lt 9 || exit 1; done
  mount | grep -w "$CHROOT" | while read a b c d
    do echo $c
  done | grep -v "^$CHROOT\$" | sort -r | while read a
  do
    echo -n "$basename: Umounting $a... "
    umount $a && echo ok || { echo failed; touch $UFAIL; }
  done
  test -r $UFAIL && rm $UFAIL || {
    echo $basename: Filesystems successfully umounted
  }
  rmdir $L 2>/dev/null
}

{
L=$LOCKDIR/mount
I=0; while ! mkdir $L; do sleep 1; I=$((I+1)); test $I -lt 9 || exit 1; done

# This function is called only when /dev is not bind-mounted
basicdev() {
  mknod $CHROOT/dev/tty c 5 0
  mknod $CHROOT/dev/console c 5 1
  mknod $CHROOT/dev/ptmx c 5 2
  mknod $CHROOT/dev/null c 1 3
  mknod $CHROOT/dev/zero c 1 5
  mknod $CHROOT/dev/full c 1 7
  mknod $CHROOT/dev/random c 1 8
  mknod $CHROOT/dev/urandom c 1 9
  ln -nsf /proc/self/fd $CHROOT/dev/fd
  ln -nsf /proc/self/fd/2 $CHROOT/dev/stderr
  ln -nsf /proc/self/fd/0 $CHROOT/dev/stdin
  ln -nsf /proc/self/fd/1 $CHROOT/dev/stdout
  mkdir $CHROOT/dev/pts
  mkdir $CHROOT/dev/shm
}

mounty sysfs /sys -n -t sysfs
mounty proc /proc -n -t proc

test -n "$staticdev" && {
  test -r $CHROOT/dev/basicdev || basicdev; touch $CHROOT/dev/basicdev
} || {
  mounty /dev /dev -n -o bind
}

mounty devpts /dev/pts -n -t devpts -o newinstance
mounty shm /dev/shm -t tmpfs
mounty tmpfs /tmp -t tmpfs
rmdir $LOCKDIR/mount
LOCK=$LOCKDIR/$$
mkdir $LOCK || exit 1
} 1>&2

addfile () {
  test "$1" = "-o" && { shift; rm $CHROOT/$1; return 0; }
  test -r $1 || return 1
  test -r $CHROOT/$1 || cp $1 $CHROOT/$1
}

# Files that are system-dependent
# /etc/resolv.conf
# /etc/hosts, /etc/fstab, /etc/passwd,
# /etc/group, /etc/shadow, /etc/ld.so.conf, /etc/scsi_id.config

test -d $CHROOT/etc/sysconfig && touch $CHROOT/etc/sysconfig/network
addfile /etc/hosts
addfile /etc/resolv.conf
addfile /etc/krb5.conf

addline () {
  test "$1" = "-f" && { force=1; shift; }
  file="$1"
  pat="$2"
  shift
  shift
  while ! test -w "$file"; do touch "$file"; done
  if [ -n "$force" ]
    then sed -i "\^$pat^d" "$file"
    else grep -q "$pat" "$file" && return 1
  fi
  echo "$@" >> $file
}
PS1='chsys:${CHROOT##*/}\$ '

echo "$CHROOT" | grep -q "i386" && SETARCH="setarch i386"

$SETARCH chroot "$CHROOT" /usr/bin/env -i \
  SHELL=$SHELL HOME=/root TERM="$TERM" PS1="$PS1" \
  PATH=${CHPATH:-"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"} \
  DISPLAY=$DISPLAY \
  $SHELL -c "{ cat /proc/mounts >> /etc/mtab; cd; exec $SHELL ${CMDS:-"-il"}; }" \
  || true

rmdir $LOCK

orphans() {
  test -n "$FUSER" || return 0
  PROCS=$($FUSER 2>/dev/null)
  RET=0
  test -n "$PROCS" && {
    RET=1
    echo "$basename: Filesystems not umounted (check PIDs)"
    echo
    echo Following processes are still running under $CHROOT:
    for i in $PROCS
    do
      echo $i $(cat /proc/$i/cmdline | tr '\0' ' ')
    done
    test -n "$kill" || {
      printf "Do you want to kill them? (y/N) "
      read kill
    }
    echo $kill | grep -iq ^y && \
      { echo "Killing $PROCS..."; kill -HUP $PROCS && RET=0;}
}
  return $RET
}

{
echo
orphans && umounty
rmdir $LOCKDIR 2>/dev/null
} 1>&2
